#!/bin/sh

set -e

use_https=""
update_existing="1"
prefer_cached_repos_list=""

while [ -n "$1" ] ; do
    case "$1" in
        --https)
            use_https="1"
        ;;
        --no-update)
            update_existing=""
        ;;
        --update)
            update_existing="1"
        ;;
        --prefer-cached-repos-list)
            prefer_cached_repos_list="1"
        ;;
    esac
    shift
done


####################################################################################

DEVEL_TOOLS=''

if [ -f ./sde-ci-common ] ; then
    DEVEL_TOOLS="`pwd`"
elif [ -f devel-tools/sde-ci-common ] ; then
    DEVEL_TOOLS="`pwd`/devel-tools"
    . devel-tools/sde-ci-common
else
    case "$0" in (/*) DEVEL_TOOLS="`dirname "$0"`" ;; esac
fi

if [ -n "$DEVEL_TOOLS" ] ; then
    export DEVEL_TOOLS
    export PATH="$DEVEL_TOOLS:$PATH"
fi

####################################################################################

PROJECT_DIR="${PROJECT_DIR-}"

if [ "x$PROJECT_DIR" = "x" ] ; then
    if [ -d ./.git ] ; then
        PROJECT_DIR=".."
    else
        PROJECT_DIR="."
    fi
fi

printf "${CODE_COLOR_CYAN}=>${CODE_COLOR_NOCOLOR} project directory: ${CODE_COLOR_RED}%s${CODE_COLOR_NOCOLOR}\n" "${PROJECT_DIR}"

if [ -z "$use_https" ] ; then
    eval `ssh-agent -s`
    if [ -f ./load-ssh-keys ] ; then
        printf "${CODE_COLOR_CYAN}=>${CODE_COLOR_NOCOLOR} reading ./load-ssh-keys\n"
        . ./load-ssh-keys
    elif [ -f ~/.ssh/id_rsa ] ; then
        printf "${CODE_COLOR_CYAN}=>${CODE_COLOR_NOCOLOR} ssh-add ~/.ssh/id_rsa\n"
        ssh-add ~/.ssh/id_rsa
    fi
fi

REPOS_CACHED_RESPONSE_PATH="$DEVEL_TOOLS/sde-repos-cached-response"

if [ -n "$prefer_cached_repos_list" -a -n "$DEVEL_TOOLS" -a -f "$REPOS_CACHED_RESPONSE_PATH" ] ; then
    REPOS_CACHED_RESPONSE="`cat "$DEVEL_TOOLS/sde-repos-cached-response"`"
fi

for i in 1 2 3 ; do

    set +e

    if [ -n "$REPOS_CACHED_RESPONSE" ] ; then
        REPOS="$REPOS_CACHED_RESPONSE"
    else
        REPOS="`curl https://api.github.com/orgs/sde-gui/repos`"
    fi

    if [ -n "$use_https" ] ; then
        URLS="`echo "$REPOS" | grep clone_url | grep -E -o 'https://.*\.git'`"
    else
        URLS="`echo "$REPOS" | grep ssh_url | grep -E -o 'git@.*\.git'`"
    fi

    set -e

    if ! echo "$URLS" | grep -q "\.git" ; then
        printf "Failed to read repos list. Something went wrong.\nReceived content:\n%s\n" "$REPOS"
        if [ -n "$DEVEL_TOOLS" -a -f "$REPOS_CACHED_RESPONSE_PATH" ] ; then
            printf "Trying to use the cached repos list\n"
            REPOS_CACHED_RESPONSE="`cat "$REPOS_CACHED_RESPONSE_PATH"`"
        else
            sleep 15
        fi
    else
        if [ -z "$REPOS_CACHED_RESPONSE" -a -n "$DEVEL_TOOLS" -a -w "$REPOS_CACHED_RESPONSE_PATH" ] ; then
            printf "${CODE_COLOR_CYAN}=>${CODE_COLOR_NOCOLOR} updating cache: ${CODE_COLOR_RED}%s${CODE_COLOR_NOCOLOR}\n" "$REPOS_CACHED_RESPONSE_PATH"

            echo "$REPOS" | grep 'clone_url\|ssh_url' | sort > "$REPOS_CACHED_RESPONSE_PATH"
        fi
        break
    fi

done

cd "$PROJECT_DIR" 

for url in $URLS ; do
    name="`echo "$url" | grep -o '[^/]\+\.git$' | sed 's/\.git$//'`"
    if [ -d "$name/.git" ] ; then
        if [ -n "$update_existing" ] ; then
            printf "${CODE_COLOR_BLUE}=>${CODE_COLOR_NOCOLOR} %-30s - updating\n" "$name"
            (cd "$name" && git pull --all)
        else
            printf "${CODE_COLOR_BLUE}=>${CODE_COLOR_NOCOLOR} %-30s - skipping\n" "$name"
        fi
        continue
    fi

    printf "${CODE_COLOR_BLUE}=>${CODE_COLOR_NOCOLOR} %-30s - fetching %s\n" "$name" "$url"
    git clone "$url"
done