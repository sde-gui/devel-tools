#!/bin/sh

set -e
set -x

####################################################################################

DEVEL_TOOLS=''

if [ -f ./sde-ci-common ] ; then
    DEVEL_TOOLS="`pwd`"
elif [ -f devel-tools/sde-ci-common ] ; then
    DEVEL_TOOLS="`pwd`/devel-tools"
    . devel-tools/sde-ci-common
else
    case "$0" in (/*) DEVEL_TOOLS="`dirname "$0"`" ;; esac
fi

if [ -n "$DEVEL_TOOLS" ] ; then
    export DEVEL_TOOLS
    export PATH="$DEVEL_TOOLS:$PATH"
fi

####################################################################################

case "$OS_ID" in
    *bsd)
        MAKE="${MAKE:-gmake}"
    ;;
esac

export PROJECT_DIR="${PROJECT_DIR:-/tmp/project-dir}"
export INSTALL_DIR="${INSTALL_DIR:-/tmp/project-dir-install}"
export SHARED_PREFIX="${SHARED_PREFIX:-$INSTALL_DIR/shared-prefix}"
export ENSURE_CLEAN_BUILD="${ENSURE_CLEAN_BUILD-y}"
export MAKE="${MAKE:-make}"
export BUILD_PROFILE="${BUILD_PROFILE:-default}"

####################################################################################

mkdir -p "$PROJECT_DIR"
mkdir -p "$INSTALL_DIR"
mkdir -p "$SHARED_PREFIX"

if [ "x-$ENSURE_CLEAN_BUILD" = "x-y" ] ; then
    if [ -d "$SHARED_PREFIX" ] ; then
        rm -rf "$SHARED_PREFIX"
    fi
fi

export PKG_CONFIG_PATH="${SHARED_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
export PATH="${SHARED_PREFIX}/bin:${PATH}"
export LD_LIBRARY_PATH="${SHARED_PREFIX}/lib:${LD_LIBRARY_PATH}"

sde-git-clone-all-projects --https --no-update --prefer-cached-repos-list

ANY_DEP_INSTALLED=n

####################################################################################

install_known_dep() {
    if [ -f "$SHARED_PREFIX/.known-dep-installed.$1" ] ; then
        echo "=> dep: $1: already installed"
        return 0
    fi
    echo "=> dep: $1: building and installing:"
    (build_project "$1")
    echo "=> dep: $1: successfully installed"
    ANY_DEP_INSTALLED=y
}

install_known_deps() {
    if echo "$1" | grep -q "sde-utils-0" ; then
        install_known_dep "libsde-utils"
    fi
    if echo "$1" | grep -q "sde-utils-x11-0" ; then
        install_known_dep "libsde-utils-x11"
    fi
    if echo "$1" | grep -q "sde-utils-jansson-0" ; then
        install_known_dep "libsde-utils-jansson"
    fi
    if echo "$1" | grep -q "sde-utils-gtk-0" ; then
        install_known_dep "libsde-utils-gtk"
    fi
    if echo "$1" | grep -q "libsmfm-core" ; then
        install_known_dep "libsmfm-core"
    fi
    if echo "$1" | grep -q "libsmfm-gtk2" ; then
        install_known_dep "libsmfm-gtk"
    fi
}

build_project() {
    local p="$1"
    if [ "$p" = "$PREFETCHED_PROJECT" ] ; then
        cd "$PREFETCHED_PROJECT_PATH"
    else
        cd "$PROJECT_DIR/$p"

        if [ "x-$ENSURE_CLEAN_BUILD" = "x-y" ] ; then
            git clean -dfx
        fi
    fi

    PROFILE_CONFIGURE_OPTIONS=""
    PROFILE_MAKE_OPTIONS=""
    PROFILE_MAKE_TARGETS=""

    if [ -f "./.build-profile.$BUILD_PROFILE" ] ; then
        . "./.build-profile.$BUILD_PROFILE"
    fi

    if [ ! -f ./configure ] ; then
        ./autogen.sh
    fi

    export TRACE_PKG_CONFIG_LOG="$PROJECT_DIR/$p/.trace-pkg-config.log"
    if [ "x-$PKG_CONFIG" != x-trace-pkg-config ] ; then
        export TRACE_PKG_CONFIG_ACTUAL_COMMAND="$PKG_CONFIG"
        export PKG_CONFIG=trace-pkg-config
    fi

    printf "" > "$TRACE_PKG_CONFIG_LOG"

    while true ; do
        if ./configure --prefix="$INSTALL_DIR/$p" $PROFILE_CONFIGURE_OPTIONS ; then
            break
        fi
        ANY_DEP_INSTALLED=n
        install_known_deps "`cat "$TRACE_PKG_CONFIG_LOG"`"
        if [ "x-$ANY_DEP_INSTALLED" = "x-n" ] ; then
            echo "=> failed to configure $p"
            return 1
        fi
    done

    $MAKE -j2 $PROFILE_MAKE_OPTIONS $PROFILE_MAKE_TARGETS
    $MAKE $PROFILE_MAKE_OPTIONS install
    $MAKE clean

    ./configure --prefix="${SHARED_PREFIX}" $PROFILE_CONFIGURE_OPTIONS
    $MAKE -j2 $PROFILE_MAKE_OPTIONS $PROFILE_MAKE_TARGETS
    $MAKE $PROFILE_MAKE_OPTIONS install

    touch "$SHARED_PREFIX/.known-dep-installed.$p"
}

####################################################################################

PROJECTS="${PROJECTS:-`find "$PROJECT_DIR" -mindepth 1 -maxdepth 1 -type d -printf '%P\n'`}"

for p in $PROJECTS ; do
    (build_project $p)
done

